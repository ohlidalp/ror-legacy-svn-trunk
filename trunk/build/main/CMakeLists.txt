project(RoR_Main)

# all sources now in autogenerated RoR.list file
# run build/CMakeScript/parseXML.py to generate it from vcproj file
# can be edited by hands too
include (RoR.list)

include_directories (OgreMain/include Dependencies/include)
include_directories (${OGRE_INCLUDE_DIR})
include_directories (${RoR_Dependencies_SOURCE_DIR}/mysocketw/)

if(CAELUM_BUILD_NEW)
  include_directories (${RoR_Dependencies_SOURCE_DIR}/caelum/main/include)
else(CAELUM_BUILD_NEW)
  include_directories (${RoR_Dependencies_SOURCE_DIR}/Caelum-2006-11-09/include)
endif(CAELUM_BUILD_NEW)

include_directories (${RoR_Dependencies_SOURCE_DIR}/openal-soft-1.8.466/include/AL)
include_directories (${RoR_Dependencies_SOURCE_DIR}/openal-soft-1.8.466/include)
include_directories (${RoR_Dependencies_SOURCE_DIR}/OIS-HEAD/ois/includes)
include_directories (${RoR_Dependencies_SOURCE_DIR}/moFileReader/include)
include_directories (${RoR_Dependencies_SOURCE_DIR}/mygui/include)

IF(WIN32)
  add_definitions("-DWIN32_LEAN_AND_MEAN -DNOMINMAX -D_CRT_SECURE_NO_WARNINGS")
ELSEIF(LINUX)
  add_definitions("-Wno-float-equal")
ELSEIF(APPLE)
ENDIF(WIN32)

# optional features
if(ROR_BUILD_HYDRAX)
  add_definitions("-DHYDRAX")
  include_directories (${RoR_Dependencies_SOURCE_DIR}/hydrax/)
endif(ROR_BUILD_HYDRAX)

if(ROR_BUILD_TRAFFIC_SUPPORT)
  add_definitions("-DAITRAFFIC")
endif(ROR_BUILD_TRAFFIC_SUPPORT)

if(ROR_BUILD_OPENCL_SUPPORT)
  add_definitions("-DOPENCL")
endif(ROR_BUILD_OPENCL_SUPPORT)

if(ROR_BUILD_PAGED)
 add_definitions("-DPAGED")
 if(ROR_BUILD_PAGED_SF)
  include_directories (${RoR_Dependencies_SOURCE_DIR}/pagedgeometry_sf/include)
 else(ROR_BUILD_PAGED_SF)
  include_directories (${RoR_Dependencies_SOURCE_DIR}/PagedGeometry/include)
 endif(ROR_BUILD_PAGED_SF)
endif(ROR_BUILD_PAGED)

if(ROR_BUILD_BEAMSTATS)
  add_definitions("-DBEAMSTATS -DTIMING")
endif(ROR_BUILD_BEAMSTATS)

if(ROR_BUILD_MOTION_PLATFORM)
  add_definitions("-DMPLATFORM")
endif(ROR_BUILD_MOTION_PLATFORM)

if(ROR_BUILD_LUASCRIPT)
  add_definitions("-DLUASCRIPT")
  include_directories (${RoR_Dependencies_SOURCE_DIR}/lua-5.1.2/src)
endif(ROR_BUILD_LUASCRIPT)

if(ROR_BUILD_BUGTRAP)
  add_definitions("-DBUGTRAP")
  include_directories (${RoR_Dependencies_SOURCE_DIR}/bugtrap)
endif(ROR_BUILD_BUGTRAP)

#if(WSYNC_BUILD_WSYNC)
#  add_definitions("-DWSYNC")
#  include_directories (${RoR_SOURCE_DIR}/wsync/include)
#
#  set(Boost_USE_STATIC_LIBS   ON)
#  set(Boost_USE_MULTITHREADED ON)
#  find_package( Boost 1.3 COMPONENTS date_time filesystem system )
#  if(Boost_FOUND)
#  else()
#    message(" !!! boost not found!")
#  endif()
#  link_directories(${Boost_LIBRARY_DIRS})
#  include_directories (${Boost_INCLUDE_DIRS})
#endif(WSYNC_BUILD_WSYNC)

if(CAELUM_BUILD_NEW)
  add_definitions("-DCAELUMNEW")
endif(CAELUM_BUILD_NEW)

if(ROR_BUILD_XFIRE)
  add_definitions("-DXFIRE")
endif(ROR_BUILD_XFIRE)

IF(ROR_BUILD_ANGELSCRIPT)
  add_definitions("-DANGELSCRIPT -DAS_USE_NAMESPACE")
  include_directories (${RoR_Dependencies_SOURCE_DIR}/angelscript/include)
  include_directories (${RoR_Dependencies_SOURCE_DIR}/angelscript/add_on)
ENDIF(ROR_BUILD_ANGELSCRIPT)

# platform specific flags
IF(WIN32)
  include_directories (${RoR_Dependencies_SOURCE_DIR}/pthreads/Pre-built.2/include)

#  add_definitions("")
ELSEIF(UNIX)
#  some useful optimizations, including SSE
#  add_definitions("-mfpmath=sse -msse2 -O2 -fomit-frame-pointer -fstrict-aliasing -ffast-math -ftracer")
  add_definitions("-Wextra -Wfloat-equal -Wno-deprecated-declarations") # -Wunreachable-code")

  # ignore warnings that are generated from the libs we use, just warn about RoR code
  add_definitions("
    -isystem ${RoR_Dependencies_SOURCE_DIR}/ogre/OgreMain/include
    -isystem ${RoR_Dependencies_SOURCE_DIR}/mygui/include
    -isystem ${RoR_Dependencies_SOURCE_DIR}/hydrax
    -isystem ${RoR_Dependencies_SOURCE_DIR}/PagedGeometry/include/
    -isystem ${RoR_Dependencies_SOURCE_DIR}/pagedGeometry_sf/include/
  ")

  EXEC_PROGRAM(pkg-config ARGS "--cflags gtk+" OUTPUT_VARIABLE CFLAGS_GTK)
  SET(CMAKE_C_FLAGS "${CMAKE_PKGCONFIG_C_FLAGS} ${CFLAGS_GTK}")

ELSEIF(APPLE)
#  add_definitions("")
ENDIF(WIN32)

# main target
add_executable(RoR ${HEADER_FILES} ${SOURCE_FILES})

# add dependencies
add_dependencies(RoR OgreMain caelum mysocketw ois mygui mofilereader)

# optional features
if(ROR_BUILD_HYDRAX)
  add_dependencies(RoR hydrax)
endif(ROR_BUILD_HYDRAX)

if(ROR_BUILD_ETM)
  add_dependencies(RoR etm)
endif(ROR_BUILD_ETM)

if(ROR_BUILD_LUASCRIPT)
  add_dependencies(RoR lua)
endif(ROR_BUILD_LUASCRIPT)

if(ROR_BUILD_BUGTRAP)
  #
endif(ROR_BUILD_BUGTRAP)

# now the linking

# always required common libs for self generated targets
target_link_libraries(RoR
  caelum
  mysocketw
  OgreMain
  ois
  mygui
  mofilereader
)

IF(WIN32)
  set_target_properties(RoR PROPERTIES LINK_FLAGS_DEBUG "/SUBSYSTEM:CONSOLE")
  set_target_properties(RoR PROPERTIES LINK_FLAGS_RELWITHDEBINFO "/SUBSYSTEM:CONSOLE")
  set_target_properties(RoR PROPERTIES LINK_FLAGS_RELEASE "/LTCG /OPT:REF /OPT:NOWIN98 /SUBSYSTEM:WINDOWS")
  set_target_properties(RoR PROPERTIES LINK_FLAGS_MINSIZEREL "/LTCG /OPT:REF /OPT:NOWIN98 /SUBSYSTEM:WINDOWS")

# this causes problems:
#if(ROR_USE_OPTIMIZATIONS_WINDOWS)
#  set(CMAKE_CXX_FLAGS_RELEASE "/GL /Ox /Ob2 /Oi /Ot /Oy /fp:fast /GS-")
#  set(CMAKE_CXX_FLAGS_MINSIZEREL "/GL /Ox /Ob2 /Oi /Ot /Oy /fp:fast /GS-")
#  set(CMAKE_CXX_FLAGS_RELWITHDEBINFO "/Od")
#  set(CMAKE_CXX_FLAGS_DEBUG "/Od")
#endif(ROR_USE_OPTIMIZATIONS_WINDOWS)

  if(ROR_USE_OPTIMIZATIONS_WINDOWS)
    SET_TARGET_PROPERTIES(RoR PROPERTIES COMPILE_FLAGS "/GL /Ox /Ob2 /Oi /Ot /Oy /fp:fast /GS- /MP")
  else(ROR_USE_OPTIMIZATIONS_WINDOWS)
    SET_TARGET_PROPERTIES(RoR PROPERTIES COMPILE_FLAGS "/Od")
  endif(ROR_USE_OPTIMIZATIONS_WINDOWS)

  target_link_libraries(RoR OpenAL32)
ELSEIF(UNIX)
  SET_TARGET_PROPERTIES(RoR PROPERTIES COMPILE_FLAGS "-msse2 -msse2 -mmmx -msse -msse3 -m3dnow")
  SET_TARGET_PROPERTIES(RoR PROPERTIES LINK_FLAGS    "")
  target_link_libraries(RoR openal)
ELSEIF(APPLE)
ENDIF(WIN32)


# optional, self build features
if(ROR_BUILD_HYDRAX)
  add_dependencies(RoR hydrax)
  target_link_libraries(RoR hydrax)
endif(ROR_BUILD_HYDRAX)


if(ROR_BUILD_PAGED)
 if(ROR_BUILD_PAGED_SF)
  add_dependencies(RoR PagedGeometry)
  target_link_libraries(RoR PagedGeometry)
 else(ROR_BUILD_PAGED_SF)
  add_dependencies(RoR paged)
  target_link_libraries(RoR paged)
 endif(ROR_BUILD_PAGED_SF)
endif(ROR_BUILD_PAGED)

if(ROR_BUILD_LUASCRIPT)
  add_dependencies(RoR lua)
  target_link_libraries(RoR lua)
endif(ROR_BUILD_LUASCRIPT)

#if(WSYNC_BUILD_WSYNC)
#  add_dependencies(RoR libwsync)
#  target_link_libraries(RoR libwsync ${Boost_LIBRARIES})
#  IF(LINUX)
#    target_link_libraries(RoR boost_filesystem-s boost_system-s boost_date_time-s)
#  ENDIF(LINUX)
#endif(WSYNC_BUILD_WSYNC)

IF(ROR_BUILD_ANGELSCRIPT)
 add_dependencies(RoR angelscript)
 target_link_libraries(RoR angelscript)
ENDIF(ROR_BUILD_ANGELSCRIPT)


IF(WIN32)
ELSEIF(UNIX)
  EXEC_PROGRAM(pkg-config ARGS "--libs gtk+" OUTPUT_VARIABLE LDFLAGS_GTK)
  SET(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} ${LDFLAGS_GTK}")
ELSEIF(APPLE)
ENDIF(WIN32)

# platform specific libraries (external ones only)
IF(WIN32)
  target_link_libraries(RoR
    ${RoR_Dependencies_SOURCE_DIR}/pthreads/Pre-built.2/lib/pthreadVC2.lib
  )
ELSEIF(UNIX)
  target_link_libraries(RoR
    zzip
    freetype
    X11
    Xt
    Xaw
  )
ELSEIF(APPLE)
ENDIF(WIN32)

install(TARGETS RoR
      RUNTIME DESTINATION ${BIN_DIR}
      LIBRARY DESTINATION ${BIN_DIR}
      ARCHIVE DESTINATION ${LIB_DIR})

IF(WIN32)
ELSEIF(UNIX)
	SET(CPACK_PACKAGE_DESCRIPTION_SUMMARY "Rigs of Rods")
	SET(CPACK_PACKAGE_VENDOR "rigsofrods.com team")
	SET(CPACK_PACKAGE_DESCRIPTION_FILE "${RoR_SOURCE_DIR}/readme.txt")
	SET(CPACK_RESOURCE_FILE_LICENSE "${RoR_SOURCE_DIR}/main/source/COPYING")
	SET(CPACK_PACKAGE_VERSION_MAJOR "0")
	SET(CPACK_PACKAGE_VERSION_MINOR "3")
	SET(CPACK_PACKAGE_VERSION_PATCH "7")
	SET(CPACK_SOURCE_IGNORE_FILES "\\\\\\\\.svn")
	SET(CPACK_INSTALL_COMMANDS "rm -rf ${RoR_SOURCE_DIR}/bin/release/linux/.svn")

	#SET(CPACK_GENERATOR ZIP)
	SET(CPACK_STRIP_FILES TRUE)
	SET(CPACK_PACKAGE_FILE_NAME ror-${CPACK_PACKAGE_VERSION_MAJOR}.${CPACK_PACKAGE_VERSION_MINOR}.${CPACK_PACKAGE_VERSION_PATCH}-Linux-i686)
	SET(CPACK_INSTALLED_DIRECTORIES "${RoR_SOURCE_DIR}/bin/release/linux;/")
	#SET(CPACK_INSTALL_CMAKE_PROJECTS "${RoR_SOURCE_DIR};RoR;ALL;.")
	SET(CPACK_PACKAGE_INSTALL_DIRECTORY "Rigs of Rods")
	INCLUDE(CPack)
ENDIF(WIN32)

