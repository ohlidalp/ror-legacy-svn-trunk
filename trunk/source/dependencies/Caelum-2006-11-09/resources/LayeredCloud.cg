sampler cloud : register(s0);
sampler detail : register(s1);

void main_vp (in float4 position : POSITION,
							in float3 normal : NORMAL,
							in float2 uv : TEXCOORD0,
							out float4 oPosition : POSITION,
							out float4 oColour : COLOR,
							out float2 oUv : TEXCOORD0,
							out float oGlow : TEXCOORD1,
							uniform float4x4 worldViewProj,
							uniform float3 eyePosition,
							uniform float3 sunDirection)
{
	oPosition = mul(worldViewProj, position);

	oColour = float4 (1, 1, 1, 1);

	oGlow = pow (clamp (dot ((position - eyePosition), sunDirection), 0, 1), 4);

	oUv = uv;
}

void main_fp (in float4 col : COLOR,
							in float2 uv : TEXCOORD0,
							in float glow : TEXCOORD1,
							out float4 oCol : COLOR,
							uniform float3 sunDirection,
							uniform float time,
							uniform float4 fogColour)
{
	// These should be shader parameters
	float density = 0.5;
//	float2 cloudSpeed = float2 (0.01, 0.01);
//	float2 detailSpeed = float2 (-0.03, -0.03);
	float2 cloudSpeed = float2 (0, 0);
	float2 detailSpeed = float2 (0, 0);
	float cloudInvScale = 0.5;
	float detailInvScale = 1.5;

	float2 cloudOffset = cloudSpeed * time;
	float2 detailOffset = detailSpeed * time;

	float a1 = tex2D (cloud, (uv + cloudOffset) * cloudInvScale);
	float a2 = tex2D (detail, (uv + detailOffset) * detailInvScale);
	fogColour.a = 1;	// Remove the alpha component!
	oCol = col * (fogColour * 2);
	oCol.a *= clamp (a1 + a2 - 1, 0, 1);
//	oCol.rgb *= 1 - oCol.a * density;
	sunDirection = normalize (sunDirection) * -0.01;
	sunDirection.x = sunDirection.x;
	sunDirection.y = -sunDirection.z;
	sunDirection.z = 0;
	float absorption = 0;
	absorption += clamp (tex2D (cloud, (uv + sunDirection * 0.2 + cloudOffset) * cloudInvScale) + tex2D (detail, (uv + sunDirection * 0.2 + detailOffset) * detailInvScale) - 1, 0, 1);
	absorption += clamp (tex2D (cloud, (uv + sunDirection * 0.4 + cloudOffset) * cloudInvScale) + tex2D (detail, (uv + sunDirection * 0.4 + detailOffset) * detailInvScale) - 1, 0, 1);
	absorption += clamp (tex2D (cloud, (uv + sunDirection * 0.6 + cloudOffset) * cloudInvScale) + tex2D (detail, (uv + sunDirection * 0.6 + detailOffset) * detailInvScale) - 1, 0, 1);
	absorption += clamp (tex2D (cloud, (uv + sunDirection * 0.8 + cloudOffset) * cloudInvScale) + tex2D (detail, (uv + sunDirection * 0.8 + detailOffset) * detailInvScale) - 1, 0, 1);
	absorption += clamp (tex2D (cloud, (uv + sunDirection * 1.0 + cloudOffset) * cloudInvScale) + tex2D (detail, (uv + sunDirection * 1.0 + detailOffset) * detailInvScale) - 1, 0, 1);
	oCol.rgb *= 1 - clamp (absorption * 0.2, 0, 1) * density;

	oCol.rgb *= glow;
}
