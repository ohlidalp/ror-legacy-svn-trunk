project(RoR_Main)

# all sources now in autogenerated RoR.list file
# run build/CMakeScript/parseXML.py to generate it from vcproj file
# can be edited by hands too
include (RoR.list)

include_directories (${OGRE_INCLUDE_DIR})
include_directories (${OGRE_INCLUDE_DEPENDENCIES_DIR})
include_directories (${MYSOCKETW_INCLUDE_DIR})
include_directories (${CAELUM_INCLUDE_DIR})
include_directories (${OPENAL_INCLUDE_DIR})
include_directories (${OIS_INCLUDE_DIR})
include_directories (${MOFILEREADER_INCLUDE_DIR})
include_directories (${MYGUI_INCLUDE_DIR})

IF(WIN32)
  include_directories (${DirectX_INCLUDE_DIR})
  link_directories(${DirectX_LIB_DIR})
  add_definitions("-DWIN32_LEAN_AND_MEAN -DNOMINMAX")
ELSEIF(LINUX)
  add_definitions("-Wno-float-equal")
ELSEIF(APPLE)
ENDIF(WIN32)

# optional features
if(ROR_BUILD_HYDRAX)
  add_definitions("-DHYDRAX")
  include_directories (${HYDRAX_INCLUDE_DIR})
endif(ROR_BUILD_HYDRAX)

if(ROR_BUILD_PAGED)
 add_definitions("-DPAGED")
 include_directories (${PAGED_INCLUDE_DIR})
endif(ROR_BUILD_PAGED)

if(ROR_BUILD_MOTION_PLATFORM)
  add_definitions("-DMPLATFORM")
endif(ROR_BUILD_MOTION_PLATFORM)

if(ROR_BUILD_LUASCRIPT)
  add_definitions("-DLUASCRIPT")
  include_directories (${LUA_INCLUDE_DIR})
endif(ROR_BUILD_LUASCRIPT)

if(ROR_BUILD_CRASHRPT)
  add_definitions("-DUSE_WINDOWS_CRASH_REPORT")
  include_directories(${CRASHRPT_INCLUDE_DIR})
  link_directories(${CRASHRPT_LIB_DIR})
endif(ROR_BUILD_CRASHRPT)

if(ROR_BUILD_XFIRE)
  add_definitions("-DXFIRE")
endif(ROR_BUILD_XFIRE)

IF(ROR_BUILD_ANGELSCRIPT)
  add_definitions("-DANGELSCRIPT -DAS_USE_NAMESPACE")
  include_directories (${AS_INCLUDE_DIR} ${AS_ADDON_DIR})
ENDIF(ROR_BUILD_ANGELSCRIPT)

# platform specific flags
IF(WIN32)
  include_directories (${WIN32PTHREADS_INCLUDE_DIR})
ELSEIF(UNIX)
  add_definitions("-Wextra -Wfloat-equal -Wno-deprecated-declarations")

  # ignore warnings that are generated from the libs we use, just warn about RoR code
  add_definitions("
    -isystem ${OGRE_INCLUDE_DIR}
    -isystem ${MYGUI_ENGINE_INCLUDE_DIR}
    -isystem ${HYDRAX_INCLUDE_DIR}
    -isystem ${PAGED_INCLUDE_DIR}
  ")

  EXEC_PROGRAM(pkg-config ARGS "--cflags gtk+" OUTPUT_VARIABLE CFLAGS_GTK)
  SET(CMAKE_C_FLAGS "${CMAKE_PKGCONFIG_C_FLAGS} ${CFLAGS_GTK}")
ELSEIF(APPLE)
ENDIF(WIN32)

MACRO(AddRoRTarget target)
	# main target
	add_executable(${target} ${HEADER_FILES} ${SOURCE_FILES})
	windows_hacks(${target})

	# add dependencies
	add_dependencies(${target} OgreMain caelum mysocketw ois mygui mofilereader)

	# optional features
	if(ROR_BUILD_HYDRAX)
	  add_dependencies(${target} hydrax)
	endif(ROR_BUILD_HYDRAX)

	if(ROR_BUILD_LUASCRIPT)
	  add_dependencies(${target} lua)
	endif(ROR_BUILD_LUASCRIPT)

	# now the linking
	# always required common libs for self generated targets
	target_link_libraries(${target}
	  caelum
	  mysocketw
	  OgreMain
	  ois
	  mygui
	  mofilereader
	)

	IF(WIN32)
	  target_link_libraries(${target} OpenAL32 ${WIN32PTHREADS_LIB})
	ELSEIF(UNIX)
	  target_link_libraries(${target} openal zzip freetype X11 Xt Xaw)
	ELSEIF(APPLE)
	ENDIF(WIN32)

	# optional, self build features
	if(ROR_BUILD_HYDRAX)
	  add_dependencies(${target} hydrax)
	  target_link_libraries(${target} hydrax)
	endif(ROR_BUILD_HYDRAX)

	if(ROR_BUILD_CRASHRPT)
	  target_link_libraries(${target} CrashRpt)
	endif(ROR_BUILD_CRASHRPT)

	if(ROR_BUILD_PAGED)
	 add_dependencies(${target} paged)
	 target_link_libraries(${target} paged)
	endif(ROR_BUILD_PAGED)

	if(ROR_BUILD_LUASCRIPT)
	  add_dependencies(${target} lua)
	  target_link_libraries(${target} lua)
	endif(ROR_BUILD_LUASCRIPT)

	IF(ROR_BUILD_ANGELSCRIPT)
	 add_dependencies(${target} angelscript)
	 target_link_libraries(${target} angelscript)
	ENDIF(ROR_BUILD_ANGELSCRIPT)
ENDMACRO(AddRoRTarget)

IF(WIN32)
ELSEIF(UNIX)
  EXEC_PROGRAM(pkg-config ARGS "--libs gtk+" OUTPUT_VARIABLE LDFLAGS_GTK)
  SET(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} ${LDFLAGS_GTK}")
ELSEIF(APPLE)
ENDIF(WIN32)

# now compile the normal RoR
AddRoRTarget(RoR)

if(ROR_BUILD_TEST)
  # and a test version of it with the same configuration
  add_definitions("-DBEAMSTATS -DTIMING -DTESTBUILD")
  AddRoRTarget(RoRTest)
endif(ROR_BUILD_TEST)