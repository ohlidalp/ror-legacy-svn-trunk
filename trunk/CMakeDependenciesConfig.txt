# components
set(ROR_USE_MYGUI   "FALSE" CACHE BOOL "use MyGUI")
set(ROR_USE_OPENAL  "FALSE" CACHE BOOL "use OPENAL")
set(ROR_USE_LUA     "FALSE" CACHE BOOL "use LUA")
set(ROR_USE_SOCKETW "FALSE" CACHE BOOL "use SOCKETW")
set(ROR_USE_OIS_G27 "FALSE" CACHE BOOL "use OIS With G27 patches")
set(ROR_USE_MOFILEREADER "FALSE" CACHE BOOL "use mofilereader")
set(ROR_USE_PAGED   "FALSE" CACHE BOOL "use paged geometry")
set(ROR_USE_CAELUM  "FALSE" CACHE BOOL "use caelum sky")


IF(WIN32)
	# check if dependencies dir is in here
	set(DEPENDENCIES_DIR_CHECK "${RoR_SOURCE_DIR}/dependencies")
	set(DEPENDENCIES_DIR "")
	if(IS_DIRECTORY ${DEPENDENCIES_DIR_CHECK})
		set(DEPENDENCIES_DIR ${DEPENDENCIES_DIR_CHECK})
	endif(IS_DIRECTORY ${DEPENDENCIES_DIR_CHECK})
	
	set(ROR_DEPENDENCIES_DIR "${DEPENDENCIES_DIR}" CACHE PATH "The ROR dependency path to use")

	if(NOT ROR_DEPENDENCIES_DIR)
		message(FATAL_ERROR "Rigs of Rods dependency dir not set properly!") 
	endif(NOT ROR_DEPENDENCIES_DIR)

		#### REQUIRED COMPONENTS
		set(Ogre_INCLUDE_DIRS "${ROR_DEPENDENCIES_DIR}/include/Ogre" CACHE PATH "The ogre include path to use")
		set(Ogre_LIBRARY_DIRS "${ROR_DEPENDENCIES_DIR}/lib" CACHE PATH "The ogre lib path to use")
		set(Ogre_LIBRARIES "OgreMain" CACHE STRING "The ogre lib to link against")

		set(Ois_INCLUDE_DIRS "${ROR_DEPENDENCIES_DIR}/include/ois" CACHE PATH "The OIS include path to use")
		set(Ois_LIBRARY_DIRS "${ROR_DEPENDENCIES_DIR}/lib" CACHE PATH "The OIS lib path to use")
		set(Ois_LIBRARIES "ois" CACHE STRING "The ogre lib to link against")

		set(BOOST_PATH "C:/Program Files/boost/boost_1_39" CACHE PATH "The BOOST root path to use")
		include_directories(${BOOST_PATH})
		link_directories   (${BOOST_PATH}/lib)

		set(PThread_INCLUDE_DIRS "${ROR_DEPENDENCIES_DIR}/include/pthread" CACHE PATH "The pthread include path to use")
		set(PThread_LIBRARY_DIRS "${ROR_DEPENDENCIES_DIR}/lib" CACHE PATH "The pthread lib path to use")
		set(PThread_LIBRARIES "pthreadVC2.lib" CACHE STRING "The pthread lib to link against")
		include_directories(${PThread_INCLUDE_DIRS})
		link_directories   (${PThread_LIBRARY_DIRS})


		#### OPTIONAL COMPONENTS
		if(ROR_USE_MYGUI)
			set(MyGUI_INCLUDE_DIRS "${ROR_DEPENDENCIES_DIR}/include/MyGUI" CACHE PATH "The mygui include path to use")
			set(MyGUI_LIBRARY_DIRS "${ROR_DEPENDENCIES_DIR}/lib" CACHE PATH "The mygui lib path to use")
			set(MyGUI_LIBRARIES "MyGUI.OgrePlatform.lib MyGUIEngine.lib" CACHE STRING "The mygui libs to link against")
		endif(ROR_USE_MYGUI)

		if(ROR_USE_OPENAL)
			set(OPENAL_INCLUDE_DIRS "${ROR_DEPENDENCIES_DIR}/include/openal-soft" CACHE PATH "The openal include path to use")
			set(OPENAL_LIBRARY_DIRS "${ROR_DEPENDENCIES_DIR}/lib" CACHE PATH "The openal lib path to use")
			set(OPENAL_LIBRARIES "OpenAL32.lib" CACHE STRING "The openal libs to link against")
		endif(ROR_USE_OPENAL) 

		if(ROR_USE_LUA)
			set(LUA_INCLUDE_DIRS "${ROR_DEPENDENCIES_DIR}/include/lua" CACHE PATH "The lua include path to use")
			set(LUA_LIBRARY_DIRS "${ROR_DEPENDENCIES_DIR}/lib" CACHE PATH "The lua lib path to use")
			set(LUA_LIBRARIES "lua.lib" CACHE STRING "The lua lib to link against")
		endif(ROR_USE_LUA) 

		if(ROR_USE_SOCKETW)
			set(SOCKETW_INCLUDE_DIRS "${ROR_DEPENDENCIES_DIR}/include/SocketW" CACHE PATH "The socketw include path to use")
			set(SOCKETW_LIBRARY_DIRS "${ROR_DEPENDENCIES_DIR}/lib" CACHE PATH "The socketw lib path to use")
			set(SOCKETW_LIBRARIES "mysocketw.lib Ws2_32.lib" CACHE STRING "The socketw lib to link against")
		endif(ROR_USE_SOCKETW) 

		if(ROR_USE_MOFILEREADER)
			set(MOFILEREADER_INCLUDE_DIRS "${ROR_DEPENDENCIES_DIR}/include/mofilereader" CACHE PATH "The mofilereader include path to use")
			set(MOFILEREADER_LIBRARY_DIRS "${ROR_DEPENDENCIES_DIR}/lib" CACHE PATH "The mofilereader lib path to use")
			set(MOFILEREADER_LIBRARIES "moFileReader.static.lib" CACHE STRING "The mofilereader lib to link against")
		endif(ROR_USE_MOFILEREADER)

		if(ROR_USE_PAGED)
			set(PAGED_INCLUDE_DIRS "${ROR_DEPENDENCIES_DIR}/include/paged" CACHE PATH "The paged include path to use")
			set(PAGED_LIBRARY_DIRS "${ROR_DEPENDENCIES_DIR}/lib" CACHE PATH "The paged lib path to use")
			set(PAGED_LIBRARIES "paged.lib" CACHE STRING "The paged lib to link against")
		endif(ROR_USE_PAGED)

		if(ROR_USE_CAELUM)
			set(CAELUM_INCLUDE_DIRS "${ROR_DEPENDENCIES_DIR}/include/Caelum" CACHE PATH "The caelum include path to use")
			set(CAELUM_LIBRARY_DIRS "${ROR_DEPENDENCIES_DIR}/lib" CACHE PATH "The caelum lib path to use")
			set(CAELUM_LIBRARIES "caelum.lib" CACHE STRING "The caelum lib to link against")
		endif(ROR_USE_CAELUM)
		
ELSEIF(UNIX)
 find_package(PkgConfig)
 PKG_CHECK_MODULES  (GTK gtk+-2.0 REQUIRED)
 include_directories(${GTK_INCLUDE_DIRS})

 PKG_CHECK_MODULES  (Ogre OGRE REQUIRED)
 PKG_CHECK_MODULES  (Ois OIS REQUIRED)
ENDIF(WIN32)


