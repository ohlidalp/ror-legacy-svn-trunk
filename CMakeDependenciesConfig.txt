# components
set(ROR_USE_MYGUI        "TRUE" CACHE BOOL "use MyGUI")
set(ROR_USE_OPENAL       "TRUE" CACHE BOOL "use OPENAL")
set(ROR_USE_SOCKETW      "TRUE" CACHE BOOL "use SOCKETW")
set(ROR_USE_PAGED        "TRUE" CACHE BOOL "use paged geometry")
set(ROR_USE_CAELUM       "TRUE" CACHE BOOL "use caelum sky")
set(ROR_USE_ANGELSCRIPT  "TRUE" CACHE BOOL "use angel script")
set(ROR_USE_CURL         "TRUE" CACHE BOOL "use curl, required for communication with online services")


# some obsolete options:
#set(ROR_BUILD_TOOLS "FALSE" CACHE BOOL "build the RoR tools Application (viewers and editors), completely separate and optional")
#set(ROR_BUILD_SIM "TRUE" CACHE BOOL "build RoR simulation")
#set(ROR_BUILD_CONVERTER "FALSE" CACHE BOOL "build RoR converter (experimental)")
# disabled some options for now
#set(ROR_USE_OPENCL      "FALSE" CACHE BOOL "use opencl (highly experimental)")
#set(ROR_USE_LITESQL     "TRUE" CACHE BOOL "use sqlite")
#set(ROR_FEAT_TIMING     "FALSE" CACHE BOOL "enable beam statistics. For core development only")
set(ROR_USE_LITESQL     OFF)
set(ROR_USE_OPENCL      OFF)
set(ROR_BUILD_UPDATER   OFF)
set(ROR_BUILD_CONVERTER OFF)
set(ROR_BUILD_TOOLS     OFF)
set(ROR_FEAT_TIMING     OFF)
set(ROR_BUILD_SIM       ON)

# set some defaults
IF(WIN32)
	set(ROR_USE_OIS_G27      "TRUE" CACHE BOOL "use OIS With G27 patches")
	set(ROR_USE_MOFILEREADER "TRUE" CACHE BOOL "use mofilereader")

	set(ROR_USE_CRASHRPT "FALSE" CACHE BOOL "use crash report tool")
	# check if dependencies dir is in here
	set(DEPENDENCIES_DIR_CHECK "${RoR_SOURCE_DIR}/dependencies_x86")
	set(DEPENDENCIES_DIR "")
	if(IS_DIRECTORY ${DEPENDENCIES_DIR_CHECK})
		set(DEPENDENCIES_DIR ${DEPENDENCIES_DIR_CHECK})
	endif(IS_DIRECTORY ${DEPENDENCIES_DIR_CHECK})

	set(ROR_DEPENDENCIES_DIR "${DEPENDENCIES_DIR}" CACHE PATH "The ROR dependency path to use")

	if(NOT ROR_DEPENDENCIES_DIR)
		message(FATAL_ERROR "Rigs of Rods dependency dir not set properly!")
	endif(NOT ROR_DEPENDENCIES_DIR)

	#### REQUIRED COMPONENTS
	set(Ogre_INCLUDE_DIRS "${ROR_DEPENDENCIES_DIR}/include/Ogre" CACHE PATH "The ogre include path to use")
	set(Ogre_LIBRARY_DIRS "${ROR_DEPENDENCIES_DIR}/lib/Ogre" CACHE PATH "The ogre lib path to use")
	set(Ogre_LIBRARIES "OgreMain" CACHE STRING "The ogre lib to link against")
	set(Ogre_LIBRARIES_DEBUG "OgreMain_d" CACHE STRING "The ogre DEBUG lib to link against")

	set(Ogre_Terrain_INCLUDE_DIRS "${ROR_DEPENDENCIES_DIR}/include/Ogre/Paging" CACHE PATH "The ogre terrain include path to use")
	set(Ogre_Terrain_LIBRARY_DIRS "${ROR_DEPENDENCIES_DIR}/lib/Ogre" CACHE PATH "The ogre terrain lib path to use")
	set(Ogre_Terrain_LIBRARIES "OgreTerrain" CACHE STRING "The ogre terrain lib to link against")
	set(Ogre_Terrain_LIBRARIES_DEBUG "OgreTerrain_d" CACHE STRING "The ogre terrain DEBUG lib to link against")

	set(Ogre_Paging_INCLUDE_DIRS "${ROR_DEPENDENCIES_DIR}/include/Ogre/Terrain" CACHE PATH "The ogre Paging include path to use")
	set(Ogre_Paging_LIBRARY_DIRS "${ROR_DEPENDENCIES_DIR}/lib/Ogre" CACHE PATH "The ogre Paging lib path to use")
	set(Ogre_Paging_LIBRARIES "OgrePaging" CACHE STRING "The ogre Paging lib to link against")
	set(Ogre_Paging_LIBRARIES_DEBUG "OgrePaging_d" CACHE STRING "The ogre Paging DEBUG lib to link against")

	set(Ogre_RTShader_INCLUDE_DIRS "${ROR_DEPENDENCIES_DIR}/include/Ogre/RTShaderSystem" CACHE PATH "The ogre RTShaderSystem include path to use")
	set(Ogre_RTShader_LIBRARY_DIRS "${ROR_DEPENDENCIES_DIR}/lib/Ogre" CACHE PATH "The ogre RTShaderSystem lib path to use")
	set(Ogre_RTShader_LIBRARIES "OgreRTShaderSystem" CACHE STRING "The ogre RTShaderSystem lib to link against")
	set(Ogre_RTShader_LIBRARIES_DEBUG "OgreRTShaderSystem" CACHE STRING "The ogre RTShaderSystem DEBUG lib to link against")

	copy_files(${ROR_DEPENDENCIES_DIR}/bin/Ogre ${EXECUTABLE_OUTPUT_PATH})

	set(Ois_INCLUDE_DIRS "${ROR_DEPENDENCIES_DIR}/include/ois" CACHE PATH "The OIS include path to use")
	set(Ois_LIBRARY_DIRS "${ROR_DEPENDENCIES_DIR}/lib/ois" CACHE PATH "The OIS lib path to use")
	set(Ois_LIBRARIES "ois" CACHE STRING "The ogre lib to link against")
	set(Ois_LIBRARIES_DEBUG "ois_d" CACHE STRING "The ogre DEBUG lib to link against")

	
    set(Boost_USE_STATIC_LIBS        ON)
    set(Boost_USE_MULTITHREADED      ON)
    set(Boost_USE_STATIC_RUNTIME    OFF)
	find_package(Boost 1.44 REQUIRED COMPONENTS date_time filesystem)

	# special include path for curl ...
	if(ROR_USE_CURL)
		set(CURL_INCLUDE_DIRS "${ROR_DEPENDENCIES_DIR}/include/" CACHE PATH "The curl include path to use")
		set(CURL_LIBRARY_DIRS "${ROR_DEPENDENCIES_DIR}/lib/curl" CACHE PATH "The curl lib path to use")
		set(CURL_LIBRARIES "libcurl_imp.lib" CACHE STRING "The curl lib to link against")
		copy_files(${ROR_DEPENDENCIES_DIR}/bin/curl ${EXECUTABLE_OUTPUT_PATH})
	endif(ROR_USE_CURL)
	
	set(PThread_INCLUDE_DIRS "${ROR_DEPENDENCIES_DIR}/include/pthread" CACHE PATH "The pthread include path to use")
	set(PThread_LIBRARY_DIRS "${ROR_DEPENDENCIES_DIR}/lib/pthread" CACHE PATH "The pthread lib path to use")
	set(PThread_LIBRARIES "pthreadVC2.lib" CACHE STRING "The pthread lib to link against")
	copy_files(${ROR_DEPENDENCIES_DIR}/bin/pthread ${EXECUTABLE_OUTPUT_PATH})
	include_directories(${PThread_INCLUDE_DIRS})
	link_directories   (${PThread_LIBRARY_DIRS})

	# directX
	set(DirectX_INCLUDE_DIRS "$ENV{DXSDK_DIR}/Include" CACHE PATH "The DirectX include path to use")
	set(DirectX_LIBRARY_DIRS "$ENV{DXSDK_DIR}/Lib/x86" CACHE PATH "The DirectX lib path to use")
	include_directories(${DirectX_INCLUDE_DIRS})
	link_directories   (${DirectX_LIBRARY_DIRS})


	#### OPTIONAL COMPONENTS
	if(ROR_USE_MYGUI)
		set(MYGUI_INCLUDE_DIRS "${ROR_DEPENDENCIES_DIR}/include/MyGUI" CACHE PATH "The mygui include path to use")
		set(MYGUI_LIBRARY_DIRS "${ROR_DEPENDENCIES_DIR}/lib/MyGUI" CACHE PATH "The mygui lib path to use")
		set(MYGUI_LIBRARIES    "MyGUI.OgrePlatform.lib;MyGUIEngine.lib" CACHE STRING "The mygui libs to link against")
		set(MYGUI_LIBRARIES_DEBUG "MyGUI.OgrePlatform_d.lib;MyGUIEngine_d.lib" CACHE STRING "The mygui libs to link against")
		copy_files(${ROR_DEPENDENCIES_DIR}/bin/MyGUI ${EXECUTABLE_OUTPUT_PATH})
	endif(ROR_USE_MYGUI)

	if(ROR_USE_OPENAL)
		set(OPENAL_INCLUDE_DIRS "${ROR_DEPENDENCIES_DIR}/include/openal-soft" CACHE PATH "The openal include path to use")
		set(OPENAL_LIBRARY_DIRS "${ROR_DEPENDENCIES_DIR}/lib/openal-soft" CACHE PATH "The openal lib path to use")
		set(OPENAL_LIBRARIES    "OpenAL32.lib" CACHE STRING "The openal libs to link against")
		set(OPENAL_LIBRARIES_DEBUG    "OpenAL32_d.lib" CACHE STRING "The openal libs to link against")
		copy_files(${ROR_DEPENDENCIES_DIR}/bin/openal-soft ${EXECUTABLE_OUTPUT_PATH})
	endif(ROR_USE_OPENAL)

	if(ROR_USE_SOCKETW)
		set(SOCKETW_INCLUDE_DIRS "${ROR_DEPENDENCIES_DIR}/include/SocketW" CACHE PATH "The socketw include path to use")
		set(SOCKETW_LIBRARY_DIRS "${ROR_DEPENDENCIES_DIR}/lib/SocketW" CACHE PATH "The socketw lib path to use")
		set(SOCKETW_LIBRARIES    "mysocketw.lib;Ws2_32.lib" CACHE STRING "The socketw lib to link against")
		set(SOCKETW_LIBRARIES_DEBUG    "mysocketw_d.lib;Ws2_32.lib" CACHE STRING "The socketw lib to link against")
	endif(ROR_USE_SOCKETW)

	if(ROR_USE_MOFILEREADER)
		set(MOFILEREADER_INCLUDE_DIRS "${ROR_DEPENDENCIES_DIR}/include/mofilereader" CACHE PATH "The mofilereader include path to use")
		set(MOFILEREADER_LIBRARY_DIRS "${ROR_DEPENDENCIES_DIR}/lib/mofilereader" CACHE PATH "The mofilereader lib path to use")
		set(MOFILEREADER_LIBRARIES    "moFileReader.static.lib" CACHE STRING "The mofilereader lib to link against")
		set(MOFILEREADER_LIBRARIES_DEBUG    "moFileReader.static_d.lib" CACHE STRING "The mofilereader lib to link against")
	endif(ROR_USE_MOFILEREADER)

	if(ROR_USE_PAGED)
		set(PAGED_INCLUDE_DIRS "${ROR_DEPENDENCIES_DIR}/include/PagedGeometry" CACHE PATH "The paged include path to use")
		set(PAGED_LIBRARY_DIRS "${ROR_DEPENDENCIES_DIR}/lib/PagedGeometry" CACHE PATH "The paged lib path to use")
		set(PAGED_LIBRARIES    "PagedGeometry.lib" CACHE STRING "The paged lib to link against")
		set(PAGED_LIBRARIES_DEBUG    "PagedGeometry_d.lib" CACHE STRING "The paged DEBUG lib to link against")
	endif(ROR_USE_PAGED)

	if(ROR_USE_CAELUM)
		set(CAELUM_INCLUDE_DIRS "${ROR_DEPENDENCIES_DIR}/include/Caelum" CACHE PATH "The caelum include path to use")
		set(CAELUM_LIBRARY_DIRS "${ROR_DEPENDENCIES_DIR}/lib/Caelum" CACHE PATH "The caelum lib path to use")
		set(CAELUM_LIBRARIES    "caelum.lib" CACHE STRING "The caelum lib to link against")
		set(CAELUM_LIBRARIES_DEBUG    "caelum_d.lib" CACHE STRING "The caelum DEBUG lib to link against")
		copy_files(${ROR_DEPENDENCIES_DIR}/bin/Caelum ${EXECUTABLE_OUTPUT_PATH})
	endif(ROR_USE_CAELUM)

	if(ROR_USE_CRASHRPT)
		set(CRASHRPT_INCLUDE_DIRS "${ROR_DEPENDENCIES_DIR}/include/CrashRpt" CACHE PATH "The CrashRpt include path to use")
		set(CRASHRPT_LIBRARY_DIRS "${ROR_DEPENDENCIES_DIR}/lib/CrashRpt" CACHE PATH "The CrashRpt lib path to use")
		set(CRASHRPT_LIBRARIES    "CrashRpt.lib" CACHE STRING "The CrashRpt lib to link against")
		copy_files(${ROR_DEPENDENCIES_DIR}/bin/CrashRpt ${EXECUTABLE_OUTPUT_PATH})
	endif(ROR_USE_CRASHRPT)

	if(ROR_USE_ANGELSCRIPT)
		set(ANGELSCRIPT_INCLUDE_DIRS "${ROR_DEPENDENCIES_DIR}/include/AngelScript;${RoR_SOURCE_DIR}/source/angelscript_addons" CACHE PATH "The AngelScript include path to use")
		set(ANGELSCRIPT_LIBRARY_DIRS "${ROR_DEPENDENCIES_DIR}/lib/AngelScript" CACHE PATH "The AngelScript lib paths to use")
		set(ANGELSCRIPT_LIBRARIES    "angelscript.lib" CACHE STRING "The AngelScript libs to link against")
		set(ANGELSCRIPT_LIBRARIES_DEBUG    "angelscript_d.lib" CACHE STRING "The AngelScript DEBUG libs to link against")
	endif(ROR_USE_ANGELSCRIPT)

	if(ROR_USE_LITESQL)
		set(LITESQL_INCLUDE_DIRS "${ROR_DEPENDENCIES_DIR}/include/litesql" CACHE PATH "The litesql include path to use")
		set(LITESQL_LIBRARY_DIRS "${ROR_DEPENDENCIES_DIR}/lib/litesql" CACHE PATH "The litesql lib path to use")
		set(LITESQL_LIBRARIES    "litesql.lib;litesql-util.lib;litesql_sqlite.lib" CACHE STRING "The litesql libs to link against")
	endif(ROR_USE_LITESQL)
	
	set(OPENCL_DIR  "C:\\ProgramData\\NVIDIA Corporation\\NVIDIA GPU Computing SDK 4.0\\" CACHE PATH "openCL path to use")
	if(ROR_USE_OPENCL)
		set(OPENCL_INCLUDE_DIRS "${OPENCL_DIR}/OpenCL/common/inc;${OPENCL_DIR}/shared/inc" CACHE PATH "The openCL include paths to use")
		set(OPENCL_LIBRARY_DIRS "${OPENCL_DIR}/shared/lib/Win32;${OPENCL_DIR}/OpenCL/common/lib;${OPENCL_DIR}/OpenCL/common/lib/Win32" CACHE PATH "The openCL lib paths to use")
		set(OPENCL_LIBRARIES    "shrUtils32.lib;oclUtils32.lib;OpenCL.lib;" CACHE STRING "The openCL libs to link against")
	endif(ROR_USE_OPENCL)
	
ELSEIF(UNIX)
   find_package(PkgConfig)
   PKG_CHECK_MODULES  (GTK gtk+-2.0 REQUIRED)
   PKG_CHECK_MODULES  (GTK_PIXBUF gdk-pixbuf-2.0 REQUIRED)
   include_directories(${GTK_INCLUDE_DIRS})
   include_directories(${GTK_PIXBUF_INCLUDE_DIRS})

   # Ogre basics
   PKG_CHECK_MODULES  (Ogre OGRE REQUIRED)

   # Ogre components
   PKG_CHECK_MODULES  (Ogre_Terrain  OGRE-Terrain         REQUIRED)
   PKG_CHECK_MODULES  (Ogre_Paging   OGRE-Paging          REQUIRED)
   PKG_CHECK_MODULES  (Ogre_RTShader OGRE-RTShaderSystem  REQUIRED)
   

   PKG_CHECK_MODULES  (Ois OIS REQUIRED)

   find_package(CURL)
   if(CURL_FOUND)
	set(CURL_INCLUDE_DIRS ${CURL_INCLUDE_DIR})
	set(CURL_LIBRARIES ${CURL_LIBRARY})
	set(ROR_USE_CURL ON)
   else()
	set(ROR_USE_CURL OFF)
   endif(CURL_FOUND)

   
   # using cmake fingd modules
   # Open-AL
   find_package(OpenAL)
   if(OPENAL_FOUND)
      set(OPENAL_INCLUDE_DIRS ${OPENAL_INCLUDE_DIR})
      set(OPENAL_LIBRARIES ${OPENAL_LIBRARY})
      set(ROR_USE_OPENAL ON)
   else()
      set(ROR_USE_OPENAL OFF)
   endif(OPENAL_FOUND)

   # using pkg-config
   # MyGUI
   PKG_CHECK_MODULES(MYGUI MYGUI)
   if(MYGUI_FOUND)
      find_library(MYGUI_OGRE_PLATFORM MyGUI.OgrePlatform)
      set(MYGUI_LIBRARIES ${MYGUI_LIBRARIES} ${MYGUI_OGRE_PLATFORM})
      # add our mygui BaseLayout
      set(MYGUI_INCLUDE_DIRS ${MYGUI_INCLUDE_DIRS})
      set(ROR_USE_MYGUI ON)
   else()
      set(ROR_USE_MYGUI OFF)
   endif(MYGUI_FOUND)

   # SocketW
   find_path(SOCKETW_INCLUDE_DIRS "SocketW.h")
   if(SOCKETW_INCLUDE_DIRS)
      find_library(SOCKETW_LIBRARIES "SocketW")
      set(ROR_USE_SOCKETW ON)
   else()
      set(ROR_USE_SOCKETW OFF)
   endif(SOCKETW_INCLUDE_DIRS)

   # Paged Geometry
   find_path(PAGED_INCLUDE_DIRS "PagedGeometry/PagedGeometry.h")
   if(PAGED_INCLUDE_DIRS)
      set(PAGED_INCLUDE_DIRS "${PAGED_INCLUDE_DIRS};/${PAGED_INCLUDE_DIRS}/PagedGeometry")
      find_library(PAGED_LIBRARIES "PagedGeometry")
      set(ROR_USE_PAGED ON)
   else()
      set(ROR_USE_PAGED OFF)
   endif(PAGED_INCLUDE_DIRS)

   # Caelum
   find_path(CAELUM_INCLUDE_DIRS "Caelum/Caelum.h")
   if(CAELUM_INCLUDE_DIRS)
      set(CAELUM_INCLUDE_DIRS "${CAELUM_INCLUDE_DIRS}/Caelum")
      find_library(CAELUM_LIBRARIES "Caelum")
      set(ROR_USE_CAELUM ON)
   else()
      set(ROR_USE_CAELUM OFF)
   endif(CAELUM_INCLUDE_DIRS)

   # Angelscript
   find_path(ANGELSCRIPT_INCLUDE_DIRS "angelscript.h")
   if(ANGELSCRIPT_INCLUDE_DIRS)
      find_library(ANGELSCRIPT_LIBRARIES "angelscript")
      # add our addons to the include path
      set(ANGELSCRIPT_INCLUDE_DIRS "${ANGELSCRIPT_INCLUDE_DIRS};${RoR_SOURCE_DIR}/source/angelscript_addons")
      set(ROR_USE_ANGELSCRIPT ON)
   else()
      set(ROR_USE_ANGELSCRIPT OFF)
   endif(ANGELSCRIPT_INCLUDE_DIRS)

   set(ROR_USE_CRASHRPT FALSE)
   set(ROR_USE_OIS_G27 FALSE)
ENDIF(WIN32)
